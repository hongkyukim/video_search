require 'camideo'
require 'http_accept_language'

class Channel < ActiveRecord::Base
  has_many :feeds, :dependent => :destroy
  has_and_belongs_to_many :videos
  belongs_to :user

  validates :name, :presence => true, :uniqueness => true, :length => { :maximum => 256 }

  # Setup accessible (or protected) attributes for your model
  attr_accessible :name, :channel_type, :tags, :categories, :language, :user_id, :querytime, :thumbnail_url

  #scope_out :selected_channels do
  #  {:conditions => ['people.birthdate < ?', 18.years.ago],
  #   :order => 'people.birthdate asc' }
  #end

  ##scope :searched_channels,   ###:joins=> :repair_notes, do
  ##             :conditions => ["channel_type = ?" 'selected2'] 
                    ###:conditions => {'channel_type = ?', search  || 'channel_type = ?', 'selected2' }
             
  

  def self.check_registered?(channel, video)
    channel.videos.include?(video)
  end

  # add video to this channel
  def self.video_add(channel, video)
    unless check_registered?(channel, video)
      channel.videos << video
    end
    ###redirect_to :action => :videos, :id => @channel
  end

  def video_remove

  end


  ### 
  ### search => nil   ---> all channels
  ### search => 'selected' ---> selected channels
  ### search => query ---> 
  def self.search(search, userlanguages=nil)
      ### filter with languages
      ###userlanguages = cookies[:user_languages] if cookies[:user_languages]

      ##if userlanguages && !userlanguages.blank?
      ##    where('language LIKE ?', userlanguages) 
      ##else
      ##           where('language LIKE ?', userlanguages)    
      ##end
##debugger
      emptylanguages = "";
      if userlanguages == "en"
          tmp_channels = where('language LIKE ?' or 'language LIKE ?', "%#{userlanguages}%", "%#{emptylanguages}%")
      else
          tmp_channels = where('language LIKE ?', "%#{userlanguages}%")
      end
      if search
          search = search.downcase
          if search == 'selected'
              ###find_by_channel_type(search) -- error not array
              ##find_by_sql("SELECT * FROM channels c WHERE c.channel_type = '#{search}' or c.channel_type = 'selected2' ").scoped
              ##find_by_sql("SELECT * FROM channels c WHERE c.channel_type = '#{search}' or c.channel_type = 'selected2' ")
              ###scope.searched_channels(search)
              ###where('channel_type = ?', "selected")
              ###where('channel_type = ? OR channel_type = ? ', "%#{search}%", 'selected2')

              ### check selected abd selected2

              tmp_channels = tmp_channels.where('channel_type LIKE ?', "%#{search}%")
          else
              ###find(:all, :conditions => ['name LIKE ?', "%#{search}%"])
              
              ###where('name LIKE ?', "%#{search}%")

              ### consider non-ordering keywords: dont care ordering
              tmp_channels = tmp_channels.order(:name)

              if userlanguages
                 tmp_channels = tmp_channels.where('language LIKE ?', "%#{userlanguages}%")

              end
              search.split(/\s\s*/).each do |x| 
                  tmp_channels = tmp_channels.where('name LIKE ?', "%#{x}%")
              end
              tmp_channels
          end
      ##else
          ##########################find(:all)
          ##scoped
      end
      tmp_channels
  end

  def self.find_preferred_language
     ###http_accept_language.user_preferred_languages # => [ 'nl-NL', 'nl-BE', 'nl', 'en-US', 'en' ]
     available = %w{en en-US nl-BE}
     env.http_accept_language.preferred_language_from(available) # => 'nl-BE'
  end 

  def self.chsearch(keywords)
    channels = order(:name)
    channels = channels.where("name like ?", "%#{keywords}%") if keywords.present?
    channels
  end
end
